{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nimport omit from \"rc-util/es/omit\";\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport { getPosition, isTreeNode } from '../util';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\nexport function fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n      title = _ref.title,\n      _title = _ref._title,\n      key = _ref.key,\n      children = _ref.children;\n\n  var mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\nexport function warningWithoutKey(treeData, fieldNames) {\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode[fieldNames.key];\n      var children = treeNode[fieldNames.children];\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\nexport function convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = toArray(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = _objectWithoutProperties(_treeNode$props, _excluded);\n\n      var dataNode = _objectSpread({\n        key: key\n      }, rest);\n\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\nexport function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  var _fillFieldNames = fillFieldNames(fieldNames),\n      fieldTitles = _fillFieldNames._title,\n      fieldKey = _fillFieldNames.key,\n      fieldChildren = _fillFieldNames.children;\n\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode[fieldKey], pos); // Pick matched title in field title list\n\n      var mergedTitle;\n\n      for (var i = 0; i < fieldTitles.length; i += 1) {\n        var fieldTitle = fieldTitles[i];\n\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      } // Add FlattenDataNode into list\n\n\n      var flattenNode = _objectSpread(_objectSpread({}, omit(treeNode, [].concat(_toConsumableArray(fieldTitles), [fieldKey, fieldChildren]))), {}, {\n        title: mergedTitle,\n        key: mergedKey,\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\nexport function traverseDataNodes(dataNodes, callback, // To avoid too many params, let use config instead of origin param\nconfig) {\n  var mergedConfig = {};\n\n  if (_typeof(config) === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n\n  mergedConfig = mergedConfig || {}; // Init config\n\n  var _mergedConfig = mergedConfig,\n      childrenPropName = _mergedConfig.childrenPropName,\n      externalGetKey = _mergedConfig.externalGetKey,\n      fieldNames = _mergedConfig.fieldNames;\n\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\n      fieldKey = _fillFieldNames2.key,\n      fieldChildren = _fillFieldNames2.children;\n\n  var mergeChildrenPropName = childrenPropName || fieldChildren; // Get keys\n\n  var syntheticGetKey;\n\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node[fieldKey], pos);\n    };\n  } // Process\n\n\n  function processNode(node, index, parent) {\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0'; // Process node if is not root\n\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        });\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\nexport function convertDataToEntities(dataNodes) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref2.initWrapper,\n      processEntity = _ref2.processEntity,\n      onProcessFinished = _ref2.onProcessFinished,\n      externalGetKey = _ref2.externalGetKey,\n      childrenPropName = _ref2.childrenPropName,\n      fieldNames = _ref2.fieldNames;\n\n  var\n  /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined; // Init config\n\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName,\n    fieldNames: fieldNames\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\nexport function getTreeNodeProps(key, _ref3) {\n  var expandedKeys = _ref3.expandedKeys,\n      selectedKeys = _ref3.selectedKeys,\n      loadedKeys = _ref3.loadedKeys,\n      loadingKeys = _ref3.loadingKeys,\n      checkedKeys = _ref3.checkedKeys,\n      halfCheckedKeys = _ref3.halfCheckedKeys,\n      dragOverNodeKey = _ref3.dragOverNodeKey,\n      dropPosition = _ref3.dropPosition,\n      keyEntities = _ref3.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active,\n      eventKey = props.eventKey;\n\n  var eventData = _objectSpread(_objectSpread({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active,\n    key: eventKey\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}","map":{"version":3,"sources":["/var/www/html/register/node_modules/rc-tree/es/utils/treeUtil.js"],"names":["_typeof","_toConsumableArray","_objectSpread","_objectWithoutProperties","_excluded","omit","toArray","warning","getPosition","isTreeNode","getKey","key","pos","undefined","fillFieldNames","fieldNames","_ref","title","_title","children","mergedTitle","warningWithoutKey","treeData","keys","Map","dig","list","path","arguments","length","forEach","treeNode","concat","recordKey","String","has","set","convertTreeToData","rootNodes","node","treeNodes","map","_treeNode$props","props","rest","dataNode","parsedChildren","filter","flattenTreeData","treeNodeList","expandedKeys","_fillFieldNames","fieldTitles","fieldKey","fieldChildren","expandedKeySet","Set","flattenList","parent","index","mergedKey","i","fieldTitle","flattenNode","data","isStart","isEnd","push","traverseDataNodes","dataNodes","callback","config","mergedConfig","externalGetKey","_mergedConfig","childrenPropName","_fillFieldNames2","mergeChildrenPropName","syntheticGetKey","processNode","parentPos","level","subNode","subIndex","convertDataToEntities","_ref2","initWrapper","processEntity","onProcessFinished","legacyExternalGetKey","mergedExternalGetKey","posEntities","keyEntities","wrapper","item","entity","getTreeNodeProps","_ref3","selectedKeys","loadedKeys","loadingKeys","checkedKeys","halfCheckedKeys","dragOverNodeKey","dropPosition","treeNodeProps","eventKey","expanded","indexOf","selected","loaded","loading","checked","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","convertNodePropsToEventData","active","eventData","Object","defineProperty","get"],"mappings":"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","sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nimport omit from \"rc-util/es/omit\";\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport { getPosition, isTreeNode } from '../util';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\nexport function fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n      title = _ref.title,\n      _title = _ref._title,\n      key = _ref.key,\n      children = _ref.children;\n\n  var mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\nexport function warningWithoutKey(treeData, fieldNames) {\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode[fieldNames.key];\n      var children = treeNode[fieldNames.children];\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\nexport function convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = toArray(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = _objectWithoutProperties(_treeNode$props, _excluded);\n\n      var dataNode = _objectSpread({\n        key: key\n      }, rest);\n\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\nexport function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  var _fillFieldNames = fillFieldNames(fieldNames),\n      fieldTitles = _fillFieldNames._title,\n      fieldKey = _fillFieldNames.key,\n      fieldChildren = _fillFieldNames.children;\n\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode[fieldKey], pos); // Pick matched title in field title list\n\n      var mergedTitle;\n\n      for (var i = 0; i < fieldTitles.length; i += 1) {\n        var fieldTitle = fieldTitles[i];\n\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      } // Add FlattenDataNode into list\n\n\n      var flattenNode = _objectSpread(_objectSpread({}, omit(treeNode, [].concat(_toConsumableArray(fieldTitles), [fieldKey, fieldChildren]))), {}, {\n        title: mergedTitle,\n        key: mergedKey,\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\nexport function traverseDataNodes(dataNodes, callback, // To avoid too many params, let use config instead of origin param\nconfig) {\n  var mergedConfig = {};\n\n  if (_typeof(config) === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n\n  mergedConfig = mergedConfig || {}; // Init config\n\n  var _mergedConfig = mergedConfig,\n      childrenPropName = _mergedConfig.childrenPropName,\n      externalGetKey = _mergedConfig.externalGetKey,\n      fieldNames = _mergedConfig.fieldNames;\n\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\n      fieldKey = _fillFieldNames2.key,\n      fieldChildren = _fillFieldNames2.children;\n\n  var mergeChildrenPropName = childrenPropName || fieldChildren; // Get keys\n\n  var syntheticGetKey;\n\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node[fieldKey], pos);\n    };\n  } // Process\n\n\n  function processNode(node, index, parent) {\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0'; // Process node if is not root\n\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        });\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\nexport function convertDataToEntities(dataNodes) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref2.initWrapper,\n      processEntity = _ref2.processEntity,\n      onProcessFinished = _ref2.onProcessFinished,\n      externalGetKey = _ref2.externalGetKey,\n      childrenPropName = _ref2.childrenPropName,\n      fieldNames = _ref2.fieldNames;\n\n  var\n  /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  // Init config\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName,\n    fieldNames: fieldNames\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\nexport function getTreeNodeProps(key, _ref3) {\n  var expandedKeys = _ref3.expandedKeys,\n      selectedKeys = _ref3.selectedKeys,\n      loadedKeys = _ref3.loadedKeys,\n      loadingKeys = _ref3.loadingKeys,\n      checkedKeys = _ref3.checkedKeys,\n      halfCheckedKeys = _ref3.halfCheckedKeys,\n      dragOverNodeKey = _ref3.dragOverNodeKey,\n      dropPosition = _ref3.dropPosition,\n      keyEntities = _ref3.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active,\n      eventKey = props.eventKey;\n\n  var eventData = _objectSpread(_objectSpread({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active,\n    key: eventKey\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}"]},"metadata":{},"sourceType":"module"}